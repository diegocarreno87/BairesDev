//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BDev.Web.TaskServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskServiceReference.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAll", ReplyAction="http://tempuri.org/ITaskService/GetAllResponse")]
        BDev.Common.Task[] GetAll(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAll", ReplyAction="http://tempuri.org/ITaskService/GetAllResponse")]
        System.Threading.Tasks.Task<BDev.Common.Task[]> GetAllAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetByID", ReplyAction="http://tempuri.org/ITaskService/GetByIDResponse")]
        BDev.Common.Task GetByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetByID", ReplyAction="http://tempuri.org/ITaskService/GetByIDResponse")]
        System.Threading.Tasks.Task<BDev.Common.Task> GetByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Create", ReplyAction="http://tempuri.org/ITaskService/CreateResponse")]
        void Create(BDev.Common.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Create", ReplyAction="http://tempuri.org/ITaskService/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(BDev.Common.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Edit", ReplyAction="http://tempuri.org/ITaskService/EditResponse")]
        void Edit(BDev.Common.Task newT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Edit", ReplyAction="http://tempuri.org/ITaskService/EditResponse")]
        System.Threading.Tasks.Task EditAsync(BDev.Common.Task newT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Delete", ReplyAction="http://tempuri.org/ITaskService/DeleteResponse")]
        void Delete(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/Delete", ReplyAction="http://tempuri.org/ITaskService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : BDev.Web.TaskServiceReference.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<BDev.Web.TaskServiceReference.ITaskService>, BDev.Web.TaskServiceReference.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BDev.Common.Task[] GetAll(int id) {
            return base.Channel.GetAll(id);
        }
        
        public System.Threading.Tasks.Task<BDev.Common.Task[]> GetAllAsync(int id) {
            return base.Channel.GetAllAsync(id);
        }
        
        public BDev.Common.Task GetByID(int ID) {
            return base.Channel.GetByID(ID);
        }
        
        public System.Threading.Tasks.Task<BDev.Common.Task> GetByIDAsync(int ID) {
            return base.Channel.GetByIDAsync(ID);
        }
        
        public void Create(BDev.Common.Task task) {
            base.Channel.Create(task);
        }
        
        public System.Threading.Tasks.Task CreateAsync(BDev.Common.Task task) {
            return base.Channel.CreateAsync(task);
        }
        
        public void Edit(BDev.Common.Task newT) {
            base.Channel.Edit(newT);
        }
        
        public System.Threading.Tasks.Task EditAsync(BDev.Common.Task newT) {
            return base.Channel.EditAsync(newT);
        }
        
        public void Delete(int ID) {
            base.Channel.Delete(ID);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int ID) {
            return base.Channel.DeleteAsync(ID);
        }
    }
}
